class Account:
    def __init__(self, balance):
        self.balance = balance
        self.trades = []
        self.position_total = 0
        self.sold_trades = []

    def add_trade(self, position, num_of_stocks, stock_name, date):
        # check if the balance of the account is greater than the cost of the trade
        if self.balance < position * num_of_stocks:
            return
        # create a trade object and add it to the trades list
        trade = Trade(position, num_of_stocks, stock_name, date)
        self.trades.append(trade)
        # subtract the cost of the trade from the balance
        self.balance -= position * num_of_stocks
        # print the transaction
        print(f"Bought {num_of_stocks} shares of {stock_name} at {position} per share")
        return
    
    def check_trades(self, sell_position, symbol, date):
        for trade in self.trades[:]:  # Iterate over a copy of the list to avoid modification issues
            if trade.sell(sell_position) is True and trade.stock_name == symbol:
                # Update balance
                self.balance += trade.sell_position * trade.num_of_stocks
                
                # Store trade details in sold_trades
                self.sold_trades.append({
                    "date": trade.date,  # Original buy date
                    "sell_date": date,   # New: passed sell date
                    "stock": trade.stock_name,
                    "buy_position": trade.buy_position,
                    "sell_position": trade.sell_position,
                    "num_of_stocks": trade.num_of_stocks,
                    "profit/loss": (trade.sell_position - trade.buy_position) * trade.num_of_stocks
                })
                
                # Print trade details
                print(f"Sold {trade.num_of_stocks} shares of {trade.stock_name} at {trade.sell_position:.2f} per share. "
                    f"Bought at {trade.buy_position:.2f}. "
                    f"Profit/Loss: {(trade.sell_position - trade.buy_position) * trade.num_of_stocks:.2f}")

                # Remove the trade from active trades
                self.trades.remove(trade)
        
        return 0

    
    def print_balance(self):
        # any existing trades, add them to the balance
        for trade in self.trades:
            self.balance += trade.buy_position * trade.num_of_stocks
        print(f"Balance: {self.balance}")
        return
    
    def print_existing_trades(self):
        for trade in self.trades:
            print(f"Trade: {trade.buy_position}, {trade.num_of_stocks}, {trade.stock_name}")
        return
    
    def print_sold_trades(self):
        for trade in self.sold_trades:
            print(
                f"Trade Details: Stock: {trade['stock']}, "
                f"B-Date: {trade['date']}, "
                f"B-Price: {trade['buy_position']:.2f}, "
                f"S-Date: {trade['sell_date']}, "
                f"S-Price: {trade['sell_position']:.2f}, "
                f"Shares: {trade['num_of_stocks']}, "
                f"Profit/Loss: {trade['profit/loss']:.2f}"
            )

        return


def check_trades(self, sell_position, symbol, date):
    for trade in self.trades[:]:  # Iterate over a copy of the list to avoid modification issues
        if trade.stock_name == symbol and (date - trade.date).days >= 5:  # Added holding period check
            if trade.sell(sell_position) is True:
                # Update balance
                self.balance += trade.sell_position * trade.num_of_stocks
                
                # Store trade details in sold_trades
                self.sold_trades.append({
                    "date": trade.date,
                    "sell_date": date,
                    "stock": trade.stock_name,
                    "buy_position": trade.buy_position,
                    "sell_position": trade.sell_position,
                    "num_of_stocks": trade.num_of_stocks,
                    "profit/loss": (trade.sell_position - trade.buy_position) * trade.num_of_stocks
                })
                
                # Print trade details
                print(f"Sold {trade.num_of_stocks} shares of {trade.stock_name} at {trade.sell_position:.2f} per share. "
                    f"Bought at {trade.buy_position:.2f}. "
                    f"Profit/Loss: {(trade.sell_position - trade.buy_position) * trade.num_of_stocks:.2f}")

                # Remove the trade from active trades
                self.trades.remove(trade)
    
    return 0